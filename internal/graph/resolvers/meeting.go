package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/BartekTao/nycu-meeting-room-api/internal/graph"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph/model"
)

// CreateMeeting is the resolver for the createMeeting field.
func (r *mutationResolver) CreateMeeting(ctx context.Context, input model.CreateMeetingInput) (*model.Meeting, error) {
	panic(fmt.Errorf("not implemented: CreateMeeting - createMeeting"))
}

// UpdateMeeting is the resolver for the updateMeeting field.
func (r *mutationResolver) UpdateMeeting(ctx context.Context, id string, input model.UpdateMeetingInput) (*model.Meeting, error) {
	panic(fmt.Errorf("not implemented: UpdateMeeting - updateMeeting"))
}

// DeleteMeeting is the resolver for the deleteMeeting field.
func (r *mutationResolver) DeleteMeeting(ctx context.Context, id string) (*model.Meeting, error) {
	panic(fmt.Errorf("not implemented: DeleteMeeting - deleteMeeting"))
}

// Meetings is the resolver for the meetings field.
func (r *queryResolver) Meetings(ctx context.Context, userID string) ([]*model.Meeting, error) {
	panic(fmt.Errorf("not implemented: Meetings - meetings"))
}

// Meeting is the resolver for the meeting field.
func (r *queryResolver) Meeting(ctx context.Context, id string) (*model.Meeting, error) {
	panic(fmt.Errorf("not implemented: Meeting - meeting"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
