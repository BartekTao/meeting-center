type Query {
  # Events(userID: ID!): [Event!]
  # Event(id: ID!): Event
  rooms(first: Int = 20, after: String): [Room!]!
  room(id: ID!): Room!
}

type Mutation {
  # createEvent(input: CreateEventInput!): Event!
  # updateEvent(id: ID!, input: UpdateEventInput!): Event!
  # deleteEvent(id: ID!): Event!
  createRoom(room: CreateRoomInput!): Room!
}

type Room {
  id: ID!
  roomId: String!
  capacity: Int!
  equipment: [String!]
  rules: [String!]
}

# type Event {
#   id: ID!
#   title: String!
#   description: String
#   startTime: Int!
#   endTime: Int!
#   participants: [User!]
#   notes: String
#   reminder: Reminder
# }

# type User {
#   id: ID!
#   name: String!
#   email: String!
# }

# type Reminder {
#   id: ID!
#   EventID: ID!
#   triggerTime: Int!
# }

input CreateRoomInput {
  id: ID
  roomId: String!
  capacity: Int!
  equipment: [String!]
  rules: [String!]
}

# input CreateEventInput {
#   title: String!
#   description: String
#   startTime: Int!
#   endTime: Int!
#   participantsIDs: [ID!]
#   notes: String
# }

input UpdateEventInput {
  title: String
  description: String
  startTime: Int
  endTime: Int
  participantsIDs: [ID!]
  notes: String
}
