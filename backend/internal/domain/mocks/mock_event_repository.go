// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\lemon\CloudNative\meeting-center\backend\internal\domain\event.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/BartekTao/nycu-meeting-room-api/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CheckAvailableRoom mocks base method.
func (m *MockEventRepository) CheckAvailableRoom(ctx context.Context, roomID string, startAt, endAt int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailableRoom", ctx, roomID, startAt, endAt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvailableRoom indicates an expected call of CheckAvailableRoom.
func (mr *MockEventRepositoryMockRecorder) CheckAvailableRoom(ctx, roomID, startAt, endAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailableRoom", reflect.TypeOf((*MockEventRepository)(nil).CheckAvailableRoom), ctx, roomID, startAt, endAt)
}

// Delete mocks base method.
func (m *MockEventRepository) Delete(ctx context.Context, id string) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEventRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockEventRepository) GetByID(ctx context.Context, id string) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEventRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEventRepository)(nil).GetByID), ctx, id)
}

// GetByUsers mocks base method.
func (m *MockEventRepository) GetByUsers(ctx context.Context, ids []string, startAt, endAt int64) (map[string][]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsers", ctx, ids, startAt, endAt)
	ret0, _ := ret[0].(map[string][]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsers indicates an expected call of GetByUsers.
func (mr *MockEventRepositoryMockRecorder) GetByUsers(ctx, ids, startAt, endAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsers", reflect.TypeOf((*MockEventRepository)(nil).GetByUsers), ctx, ids, startAt, endAt)
}

// UpdateSummary mocks base method.
func (m *MockEventRepository) UpdateSummary(ctx context.Context, id, summary, updaterID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSummary", ctx, id, summary, updaterID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSummary indicates an expected call of UpdateSummary.
func (mr *MockEventRepositoryMockRecorder) UpdateSummary(ctx, id, summary, updaterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSummary", reflect.TypeOf((*MockEventRepository)(nil).UpdateSummary), ctx, id, summary, updaterID)
}

// Upsert mocks base method.
func (m *MockEventRepository) Upsert(ctx context.Context, event domain.Event) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, event)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockEventRepositoryMockRecorder) Upsert(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockEventRepository)(nil).Upsert), ctx, event)
}
