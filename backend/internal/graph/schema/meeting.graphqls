type Query {
  paginatedRooms(first: Int = 20, after: String): RoomConnection!
  room(id: ID!): Room!

  userEvents(userID: ID!): [Event!]
  event(id: ID!): Event
  paginatedAvailableRooms(from: Int!, to: Int!, first: Int = 20, after: String): RoomConnection!
}

type Mutation {
  upsertRoom(room: UpsertRoomInput!): Room!
  deleteRoom(id: ID!): Room!

  upsertEvent(input: UpsertEventInput!): Event!
  deleteEvent(id: ID!): Event!
}

type Room implements Node {
  id: ID!
  roomId: String!
  capacity: Int!
  equipment: [String!]
  rules: [String!]
  isDelete: Boolean
  bookings: [Booking!]
}

type Booking {
  startAt: Int!
  endAt: Int!
  bookedBy: User!
}

interface Connection {
  edges: [Edge]
  pageInfo: PageInfo!
}

interface Edge {
  node: Node
  cursor: String!
}

interface Node {
  id: ID!
}

type RoomConnection implements Connection {
  edges: [RoomEdge]
  pageInfo: PageInfo!
}

type RoomEdge implements Edge {
  node: Room
  cursor: String!
}

type PageInfo {
  startCursor: String
  endCursor: String
}

input UpsertRoomInput {
  id: ID
  roomId: String!
  capacity: Int!
  equipment: [String!]
  rules: [String!]
}

type Event {
  id: ID!
  title: String!
  description: String
  startAt: Int!
  endAt: Int!
  room: Room
  participants: [User!]
  notes: String
  remindAt: Int!
  creator: User!
  isDelete: Boolean
}

type User {
  id: ID!
  name: String!
  email: String!
}

input UpsertEventInput {
  id: ID
  title: String!
  description: String
  startAt: Int!
  endAt: Int!
  roomId: ID
  participantsIDs: [ID!]
  notes: String
  remindAt: Int!
}
