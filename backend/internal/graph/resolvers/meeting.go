package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/BartekTao/nycu-meeting-room-api/internal/graph"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph/model"
)

// UpsertRoom is the resolver for the upsertRoom field.
func (r *mutationResolver) UpsertRoom(ctx context.Context, upsertRoomInput model.UpsertRoomInput) (*model.Room, error) {
	room, err := r.meetingManager.UpsertRoom(ctx, upsertRoomInput)
	if err != nil {
		return nil, err
	}
	return &model.Room{
		ID:        room.ID.Hex(),
		RoomID:    room.RoomID,
		Capacity:  room.Capacity,
		Equipment: room.Equipment,
		Rules:     room.Rules,
		IsDelete:  &room.IsDelete,
	}, nil
}

// DeleteRoom is the resolver for the deleteRoom field.
func (r *mutationResolver) DeleteRoom(ctx context.Context, id *string) (*model.Room, error) {
	room, err := r.meetingManager.DeleteRoom(ctx, *id)
	if err != nil {
		return nil, err
	}
	return &model.Room{
		ID:        room.ID.Hex(),
		RoomID:    room.RoomID,
		Capacity:  room.Capacity,
		Equipment: room.Equipment,
		Rules:     room.Rules,
		IsDelete:  &room.IsDelete,
	}, nil
}

// PaginatedRooms is the resolver for the paginatedRooms field.
func (r *queryResolver) PaginatedRooms(ctx context.Context, first *int, after *string) (*model.RoomConnection, error) {
	panic(fmt.Errorf("not implemented: PaginatedRooms - paginatedRooms"))
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, id string) (*model.Room, error) {
	panic(fmt.Errorf("not implemented: Room - room"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
