package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/BartekTao/nycu-meeting-room-api/internal/app"
	"github.com/BartekTao/nycu-meeting-room-api/internal/common"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph/model"
)

// UpsertRoom is the resolver for the upsertRoom field.
func (r *mutationResolver) UpsertRoom(ctx context.Context, room model.UpsertRoomInput) (*model.Room, error) {
	upsertRoom := app.UpsertRoomRequest{
		ID:        room.ID,
		RoomID:    room.RoomID,
		Capacity:  room.Capacity,
		Equipment: room.Equipment,
		Rules:     room.Rules,
	}
	res, err := r.roomService.UpsertRoom(ctx, upsertRoom)
	if err != nil {
		return nil, err
	}
	return &model.Room{
		ID:        *res.ID,
		RoomID:    res.RoomID,
		Capacity:  res.Capacity,
		Equipment: res.Equipment,
		Rules:     res.Rules,
		IsDelete:  &res.IsDelete,
	}, nil
}

// DeleteRoom is the resolver for the deleteRoom field.
func (r *mutationResolver) DeleteRoom(ctx context.Context, id *string) (*model.Room, error) {
	room, err := r.roomService.DeleteRoom(ctx, *id)
	if err != nil {
		return nil, err
	}
	return &model.Room{
		ID:        *room.ID,
		RoomID:    room.RoomID,
		Capacity:  room.Capacity,
		Equipment: room.Equipment,
		Rules:     room.Rules,
		IsDelete:  &room.IsDelete,
	}, nil
}

// UpsertEvent is the resolver for the upsertEvent field.
func (r *mutationResolver) UpsertEvent(ctx context.Context, input model.UpsertEventInput) (*model.Event, error) {
	event, upsert_err := r.meetingManager.UpsertEvent(ctx, input)
	if upsert_err != nil {
		return nil, upsert_err
	}

	temp_room, query_err := r.meetingManager.QueryRoom(ctx, *event.RoomID)
	if query_err != nil {
		return nil, query_err
	}
	room := &model.Room{
		ID:        temp_room.ID.Hex(),
		RoomID:    temp_room.RoomID,
		Capacity:  temp_room.Capacity,
		Equipment: temp_room.Equipment,
		Rules:     temp_room.Rules,
		IsDelete:  &temp_room.IsDelete,
	}

	return &model.Event{
		ID:          event.ID.Hex(),
		Title:       event.Title,
		Description: event.Description,
		StartAt:     event.StartAt,
		EndAt:       event.EndAt,
		Room:        room,
		// Participants: ,
		Notes:    event.Notes,
		RemindAt: event.RemindAt,
	}, nil
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: DeleteEvent - deleteEvent"))
}

// PaginatedRooms is the resolver for the paginatedRooms field.
func (r *queryResolver) PaginatedRooms(ctx context.Context, first *int, after *string) (*model.RoomConnection, error) {
	skip, err := common.DecodeCursor(after)
	if err != nil {
		return nil, err
	}

	rooms, err := r.roomService.QueryPaginated(ctx, *skip, *first)
	if err != nil {
		return nil, err
	}

	if len(rooms) == 0 {
		return &model.RoomConnection{}, nil
	}

	edges := make([]*model.RoomEdge, len(rooms))
	for idx, room := range rooms {
		edges[idx] = &model.RoomEdge{
			Node: &model.Room{
				ID:        *room.ID,
				RoomID:    room.RoomID,
				Capacity:  room.Capacity,
				Equipment: room.Equipment,
				Rules:     room.Rules,
			},
			Cursor: common.EncodeCursor(idx + 1 + *skip),
		}
	}

	return &model.RoomConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			StartCursor: &edges[0].Cursor,
			EndCursor:   &edges[len(edges)-1].Cursor,
		},
	}, nil
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, id string) (*model.Room, error) {
	panic(fmt.Errorf("not implemented: Room - room"))
}

// UserEvents is the resolver for the userEvents field.
func (r *queryResolver) UserEvents(ctx context.Context, userID string) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: UserEvents - userEvents"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// PaginatedAvailableRooms is the resolver for the paginatedAvailableRooms field.
func (r *queryResolver) PaginatedAvailableRooms(ctx context.Context, from int, to int, first *int, after *string) (*model.RoomConnection, error) {
	panic(fmt.Errorf("not implemented: PaginatedAvailableRooms - paginatedAvailableRooms"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
