package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/BartekTao/nycu-meeting-room-api/internal/common"
	"github.com/BartekTao/nycu-meeting-room-api/internal/domain"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph/model"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*domain.User, error) {
	user, err := r.userService.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// PaginatedUsers is the resolver for the paginatedUsers field.
func (r *queryResolver) PaginatedUsers(ctx context.Context, first *int, after *string) (*model.UserConnection, error) {
	skip, err := common.DecodeCursor(after)
	if err != nil {
		return nil, err
	}

	users, err := r.userService.QueryPaginated(ctx, *skip, *first)
	if err != nil {
		return nil, err
	}

	if len(users) == 0 {
		return nil, nil
	}

	edges := make([]*model.UserEdge, len(users))
	for idx, user := range users {
		edges[idx] = &model.UserEdge{
			Node:   &user,
			Cursor: common.EncodeCursor(idx + 1 + *skip),
		}
	}

	return &model.UserConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			StartCursor: &edges[0].Cursor,
			EndCursor:   &edges[len(edges)-1].Cursor,
		},
	}, nil
}

// UserEvents is the resolver for the userEvents field.
func (r *queryResolver) UserEvents(ctx context.Context, userIDs []string, startAt int64, endAt int64) ([]*model.UserEvent, error) {
	userEvents, err := r.eventService.GetUserEvents(ctx, userIDs, startAt, endAt)
	if err != nil {
		return nil, err
	}

	res := make([]*model.UserEvent, len(userEvents))
	for userID, userEvent := range userEvents {
		res = append(res, &model.UserEvent{
			User: &domain.User{
				ID: common.ToPtr(userID),
			},
			Events: userEvent,
		})
	}
	return res, nil
}

// User is the resolver for the user field.
func (r *userEventResolver) User(ctx context.Context, obj *model.UserEvent) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// UserEvent returns graph.UserEventResolver implementation.
func (r *Resolver) UserEvent() graph.UserEventResolver { return &userEventResolver{r} }

type userEventResolver struct{ *Resolver }
