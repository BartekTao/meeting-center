package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/BartekTao/nycu-meeting-room-api/internal/app"
	"github.com/BartekTao/nycu-meeting-room-api/internal/common"
	"github.com/BartekTao/nycu-meeting-room-api/internal/domain"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph"
	"github.com/BartekTao/nycu-meeting-room-api/internal/graph/model"
	"github.com/BartekTao/nycu-meeting-room-api/pkg/middleware"
)

// UpsertRoom is the resolver for the upsertRoom field.
func (r *mutationResolver) UpsertRoom(ctx context.Context, room model.UpsertRoomInput) (*domain.Room, error) {
	claims, _ := ctx.Value(middleware.UserCtxKey).(*middleware.MeetingCenterClaims)

	upsertRoom := app.UpsertRoomRequest{
		ID:         room.ID,
		Name:       room.Name,
		Capacity:   room.Capacity,
		Equipments: room.Equipments,
		Rules:      room.Rules,
		UpdaterID:  claims.Sub,
	}
	res, err := r.roomService.Upsert(ctx, upsertRoom)
	if err != nil {
		return nil, err
	}
	return res, nil
}

// DeleteRoom is the resolver for the deleteRoom field.
func (r *mutationResolver) DeleteRoom(ctx context.Context, id string) (*domain.Room, error) {
	room, err := r.roomService.Delete(ctx, id)
	if err != nil {
		return nil, err
	}
	return room, nil
}

// PaginatedRooms is the resolver for the paginatedRooms field.
func (r *queryResolver) PaginatedRooms(ctx context.Context, first *int, after *string) (*model.RoomConnection, error) {
	skip, err := common.DecodeCursor(after)
	if err != nil {
		return nil, err
	}

	rooms, err := r.roomService.QueryPaginated(ctx, *skip, *first)
	if err != nil {
		return nil, err
	}

	if len(rooms) == 0 {
		return nil, nil
	}

	edges := make([]*model.RoomEdge, len(rooms))
	for idx, room := range rooms {
		edges[idx] = &model.RoomEdge{
			Node:   &room,
			Cursor: common.EncodeCursor(idx + 1 + *skip),
		}
	}

	return &model.RoomConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			StartCursor: &edges[0].Cursor,
			EndCursor:   &edges[len(edges)-1].Cursor,
		},
	}, nil
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, id string) (*domain.Room, error) {
	room, err := r.roomService.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return room, nil
}

// PaginatedRoomSchedules is the resolver for the paginatedRoomSchedules field.
func (r *queryResolver) PaginatedRoomSchedules(ctx context.Context, ids []string, startAt int64, endAt int64, rules []domain.Rule, equipments []domain.Equipment, first *int, after *string) (*model.RoomScheduleConnection, error) {
	skip, err := common.DecodeCursor(after)
	if err != nil {
		return nil, err
	}

	roomSchedules, err := r.roomService.QueryPaginatedRoomSchedule(
		ctx,
		ids,
		equipments,
		rules,
		startAt,
		endAt,
		*skip,
		*first,
	)
	if err != nil {
		return nil, err
	}

	if len(roomSchedules) == 0 {
		return nil, nil
	}

	edges := make([]*model.RoomScheduleEdge, len(roomSchedules))
	for idx, roomSchedule := range roomSchedules {
		edges[idx] = &model.RoomScheduleEdge{
			Node:   &roomSchedule,
			Cursor: common.EncodeCursor(idx + 1 + *skip),
		}
	}

	return &model.RoomScheduleConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			StartCursor: &edges[0].Cursor,
			EndCursor:   &edges[len(edges)-1].Cursor,
		},
	}, nil
}

// PaginatedAvailableRooms is the resolver for the paginatedAvailableRooms field.
func (r *queryResolver) PaginatedAvailableRooms(ctx context.Context, ids []string, startAt int64, endAt int64, rules []domain.Rule, equipments []domain.Equipment, first *int, after *string) (*model.RoomConnection, error) {
	skip, err := common.DecodeCursor(after)
	if err != nil {
		return nil, err
	}
	rooms, err := r.roomService.QueryPaginatedAvailable(
		ctx,
		ids,
		equipments,
		rules,
		startAt, endAt,
		*skip, *first,
	)
	if err != nil {
		return nil, err
	}

	if len(rooms) == 0 {
		return nil, nil
	}

	edges := make([]*model.RoomEdge, len(rooms))
	for idx, room := range rooms {
		edges[idx] = &model.RoomEdge{
			Node:   &room,
			Cursor: common.EncodeCursor(idx + 1 + *skip),
		}
	}

	return &model.RoomConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			StartCursor: &edges[0].Cursor,
			EndCursor:   &edges[len(edges)-1].Cursor,
		},
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
